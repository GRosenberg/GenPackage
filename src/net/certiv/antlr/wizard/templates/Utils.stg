delimiters "%", "%"

LogClass(packageName) ::= <<
/*******************************************************************************
 * Copyright (c) 2008-2014 G Rosenberg.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *		G Rosenberg - initial API and implementation
 *
 * Versions:
 * 		1.0 - 2014.03.26: First release level code
 *******************************************************************************/
package %packageName%.util;


import java.util.HashMap;

import org.apache.log4j.Logger;

public class Log {

	// private static Logger logger = Logger.getLogger(Log.class);
	private static HashMap<Integer, LogLevel> logLevels = new HashMap<>();
	private static Integer LogId = Integer.valueOf(Log.class.hashCode());
	static {
		setLevel(LogId, LogLevel.Warn); // sets the global default log value
	}

	public static enum LogLevel {
		Fatal(0),
		Error(1),
		Warn(2),
		Info(3),
		Debug(4),
		Trace(5);

		private int value;

		LogLevel(int value) {
			this.value = value;
		}

		public int value() {
			return value;
		}

		public boolean check(Object source) {
			if (source == null) return false;
			return this.value <= logLevelOf(source).value;
		}
	}

	/**
	 * Sets a log level as a default for a class type. In the absence of a class specific level, the
	 * global default is applied. For a log message to be printed, the log level must be GTE the log
	 * level set for the source class.
	 */
	public static void defLevel(LogLevel level) {
		setLevel(null, level);
	}

	public static void defLevel(String level) {
		setLevel(null, level);
	}

	public static void setLevel(Object source, String level) {
		if (level == null) return;
		level = Strings.titleCase(level);
		setLevel(source, LogLevel.valueOf(level));
	}

	public static void setLevel(Object source, LogLevel level) {
		if (source == null && level == null) return;
		if (source == null) source = LogId;
		if (level == null) level = defaultLogLevel();

		int id = source.hashCode();
		String name = objNameOf(source);

		logLevels.put(id, level);
		debug(Log.class, "Logging value set [class=" + name + ", level=" + level.toString() + "]");
	}

	private static LogLevel logLevelOf(Object source) {
		if (source == null) return defaultLogLevel();
		LogLevel level = logLevels.get(source.hashCode());
		if (level == null) {
			debug(Log.class, "Log level has not been set for " + objNameOf(source));
			setLevel(source, defaultLogLevel());
			return defaultLogLevel();
		}
		return level;
	}

	private static LogLevel defaultLogLevel() {
		return logLevels.get(LogId);
	}

	private static boolean loggable(Object source, LogLevel level) {
		LogLevel srcLevel = logLevelOf(source);
		if (level.value() > srcLevel.value()) return false;
		return true;
	}

	private static String objNameOf(Object source) {
		String fqname = source.getClass().getName();
		int dot = fqname.lastIndexOf('.');
		String name = dot > -1 ? fqname.substring(dot + 1) : fqname;
		return name;
	}

	// /////////////////////////////////////////////////////////////////////////

	public static void trace(Object source, String message) {
		log(source, LogLevel.Trace, message, null);
	}

	public static void trace(Object source, String message, Throwable e) {
		log(source, LogLevel.Trace, message, e);
	}

	public static void debug(Object source, String message) {
		log(source, LogLevel.Debug, message, null);
	}

	public static void debug(Object source, String message, Throwable e) {
		log(source, LogLevel.Debug, message, e);
	}

	public static void info(Object source, String message) {
		log(source, LogLevel.Info, message, null);
	}

	public static void info(Object source, String message, Throwable e) {
		log(source, LogLevel.Info, message, e);
	}

	public static void warn(Object source, String message) {
		log(source, LogLevel.Warn, message, null);
	}

	public static void warn(Object source, String message, Throwable e) {
		log(source, LogLevel.Warn, message, e);
	}

	public static void error(Object source, String message) {
		log(source, LogLevel.Error, message, null);
	}

	public static void error(Object source, String message, Throwable e) {
		log(source, LogLevel.Error, message, e);
	}

	public static void fatal(Object source, String message) {
		log(source, LogLevel.Fatal, message, null);
	}

	public static void fatal(Object source, String message, Throwable e) {
		log(source, LogLevel.Fatal, message, e);
	}

	private static void log(Object source, LogLevel srcLevel, String message, Throwable e) {
		if (loggable(source, srcLevel)) {
			if (source == null) source = Log.class;
			Logger logger = Logger.getLogger(source.getClass());
			switch (srcLevel) {
				case Trace:
					logger.trace(message, e);
					break;
				case Debug:
					logger.debug(message, e);
					break;
				case Info:
					logger.info(message, e);
					break;
				case Warn:
					logger.warn(message, e);
					break;
				case Error:
					logger.error(message, e);
					break;
				case Fatal:
					logger.fatal(message, e);
					break;
			}
		}
	}
}

>>

ReflectClass(packageName) ::= <<
/*******************************************************************************
 * Copyright (c) 2008-2014 G Rosenberg.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *		G Rosenberg - initial API and implementation
 *
 * Versions:
 * 		1.0 - 2014.03.26: First release level code
 *******************************************************************************/
package %packageName%.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Reflect {

	private Reflect() {}

	public static void set(Object target, String fieldName, Object value) {
		try {
			Field f = target.getClass().getDeclaredField(fieldName);
			f.setAccessible(true);
			f.set(target, value);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
	}

	public static void setSuper(Object target, String fieldName, Object value) {
		try {
			Field f = target.getClass().getSuperclass().getDeclaredField(fieldName);
			f.setAccessible(true);
			f.set(target, value);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
	}

	public static Object get(Object target, String fieldName) {
		try {
			Field f = target.getClass().getDeclaredField(fieldName);
			f.setAccessible(true);
			return f.get(target);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object getSuper(Object target, String fieldName) {
		try {
			Field f = target.getClass().getSuperclass().getDeclaredField(fieldName);
			f.setAccessible(true);
			return f.get(target);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object invoke(Object target, String methodName, Class<?>[] params, Object[] args) {

		try {
			Method m = target.getClass().getMethod(methodName, params);
			m.setAccessible(true);
			return m.invoke(target, args);
		} catch (SecurityException | NoSuchMethodException | IllegalArgumentException
				| IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object invokeSuperDeclared(Object target, String methodName, Class<?>[] params, Object[] args) {

		try {
			Method m = target.getClass().getSuperclass().getDeclaredMethod(methodName, params);
			m.setAccessible(true);
			return m.invoke(target, args);
		} catch (SecurityException | NoSuchMethodException | IllegalArgumentException
				| IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object make(Class<?> clazz, Object[] args) {
		Constructor<?> c = clazz.getDeclaredConstructors()[0];
		c.setAccessible(true);
		Object object = null;
		try {
			object = c.newInstance(args);
		} catch (SecurityException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return object;
	}
	
	public static String simpleClassName(Object arg) {
		String name = arg.getClass().getCanonicalName();
		if (name != null) {
			int mark = name.lastIndexOf('.');
			if (mark > 0) {
				return name.substring(mark + 1);
			}
		}
		return "<unknown>";
	}
	
}

>>

StringsClass(packageName) ::= <<
/*******************************************************************************
 * Copyright (c) 2008-2014 G Rosenberg.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *		G Rosenberg - initial API and implementation
 *
 * Versions:
 * 		1.0 - 2014.03.26: First release level code
 *******************************************************************************/
package %packageName%.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import %packageName%.converter.Value;

import org.apache.commons.io.FilenameUtils;

public class Strings {

	/** Platform dependent end-of-line marker */
	public static final String eol = System.lineSeparator();
	/** Platform dependent path separator mark */
	public static final char pathSep = File.separatorChar;

	/** classpath (and unix) separator) */
	private static final String STD_SEPARATOR = "/";

	/** Windows separator character for classpath use. */
	private static final String WINDOWS_SEPARATOR = "\\\\";

	/** Reference characters */
	private static char[] R = { '$', '@', '.', '#' };

	/** Quoting character pairs */
	private static char[][] Q = {
			{ '\'', '\'' },
			{ '\"', '\"' },
			{ '[', ']' },
			{ '(', ')' },
			{ '{', '}' },
			{ '<', '>' }
	};

	public static String asString(ArrayList<String> values, boolean asPrefix, String sep) {
		StringBuilder sb = new StringBuilder();
		String pf = asPrefix ? sep : "";
		String sf = asPrefix ? "" : sep;
		for (String value : values) {
			sb.append(pf + value + sf);
		}
		if (!asPrefix) { // removes trailing sep by default
			int beg = sb.length() - 1 - sep.length();
			sb.delete(beg, sb.length());
		}
		return sb.toString();
	}

	public static boolean numeric(String value) {
		if (value.length() == 0) return false; // empty string is a string
		try {
			Double.parseDouble(value);
		} catch (NumberFormatException e) {
			return false;
		}
		return true;
	}

	public static String csvValueList(List<Value> valueList) {
		return csvValueList(valueList, ", ");
	}

	public static String csvValueList(List<Value> valueList, String sep) {
		if (valueList == null) return "";
		StringBuilder sb = new StringBuilder();
		for (Value v : valueList) {
			sb.append(v.basis + sep);
		}
		return sb.toString().substring(0, sb.length() - sep.length());
	}

	public static String csvList(List<String> stringList) {
		if (stringList == null) return "";
		StringBuilder sb = new StringBuilder();
		for (String str : stringList) {
			sb.append(str + ", ");
		}
		int len = sb.length();
		sb.delete(len - 2, len);
		return sb.toString();
	}

	public static List<String> csvToList(String csv) {
		String[] parts = csv.split(",");
		return Arrays.asList(parts);
	}

	/**
	 * Remove leading reference identifier. No error if the identifier is not present.
	 */
	public static String varName(String varRef) {
		for (int idx = 0; idx < R.length; idx++) {
			if (varRef.charAt(0) == R[idx]) {
				return varRef.substring(1);
			}
		}
		return varRef;
	}

	/**
	 * Remove one level of quotes surrounding the literal. No error if quotes are not present or are mixed.
	 */
	public static String deQuote(String literal) {
		int endIdx = literal.length() - 1;
		if (endIdx < 2) return literal;
		char beg = literal.charAt(0);
		char end = literal.charAt(endIdx);
		for (int idx = 0; idx < Q.length; idx++) {
			if (beg == Q[idx][0] && end == Q[idx][1]) {
				return literal.substring(1, endIdx);
			}
		}
		return literal;
	}

	/**
	 * Convert separators so the string is a valid URL appropriate for classpath discovery
	 */
	public static String concatAsClassPath(String... args) {
		return concat(args).replaceAll(WINDOWS_SEPARATOR, STD_SEPARATOR);
	}

	/**
	 * Generalized concatenation of path strings
	 */
	public static String concat(String... args) {
		String result = "";
		for (String arg : args) {
			result = FilenameUtils.concat(result, arg);
		}
		return result;
	}

	public static String ext(String pathname) {
		File fname = new File(pathname);
		String name = fname.getName();
		int dot = name.lastIndexOf('.');
		if (dot == -1 || dot == name.length() - 1) return "";
		return name.substring(dot + 1);
	}

	public static String trimLeft(String s) {
		int idx = 0;
		while (idx < s.length() && Character.isWhitespace(s.charAt(idx))) {
			idx++;
		}
		return s.substring(idx);
	}

	public static String trimRight(String s) {
		int idx = s.length() - 1;
		while (idx >= 0 && Character.isWhitespace(s.charAt(idx))) {
			idx--;
		}
		return s.substring(0, idx + 1);
	}

	public static String titleCase(String word) {
		if (word == null || word.length() == 0) return "";
		if (word.length() == 1) return word.toUpperCase();
		return word.substring(0, 1).toUpperCase() +
				word.substring(1).toLowerCase();
	}

	/**
	 * Returns the lines of the block prefixed with the indent string. Ensures a leading EOL
	 * sequence and no trailing whitespace.
	 *
	 * @param ci
	 * @param block
	 * @return
	 */
	public static String indentBlock(String ci, String block) {
		if (block == null) return "<Error: indent include block is null>";
		StringReader sr = new StringReader(block);
		BufferedReader buf = new BufferedReader(sr);
		StringBuilder sb = new StringBuilder();
		String s;
		try {
			while ((s = buf.readLine()) != null) {
				sb.append(ci + s + Strings.eol);
			}
			char c = sb.charAt(0);
			if (c != '\n' && c != '\r') {
				sb.insert(0, eol);
			}
			return trimRight(sb.toString());
		} catch (IOException e) {
			sb.append("<Error indenting block: " + e.getMessage() + ">");
		}
		return sb.toString();
	}
}

>>

