delimiters "%", "%"

LogClass(packageName) ::= <<
package %packageName%.util;

import org.apache.log4j.Logger;

public class Log {

	private static Logger logger = Logger.getLogger(Log.class);

	private Log() {}

	public static void info(Object source, String message) {
		info(source, true, message, null);
	}

	public static void info(Object source, boolean debug, String message) {
		info(source, debug, message, null);
	}

	public static void info(Object source, String message, Throwable e) {
		info(source, true, message, e);
	}

	public static void info(Object source, boolean debug, String message, Throwable e) {
		if (!debug) return;
		logger = Logger.getLogger(source.getClass());
		if (e == null) {
			logger.info(message);
		} else {
			logger.info(message, e);
		}
	}

	public static void debug(Object source, String message) {
		debug(source, true, message, null);
	}

	public static void debug(Object source, boolean debug, String message) {
		debug(source, debug, message, null);
	}

	public static void debug(Object source, String message, Throwable e) {
		debug(source, true, message, e);
	}

	public static void debug(Object source, boolean debug, String message, Throwable e) {
		if (!debug) return;
		logger = Logger.getLogger(source.getClass());
		if (e == null) {
			logger.debug(message);
		} else {
			logger.debug(message, e);
		}
	}

	public static void warn(Object source, String message) {
		warn(source, true, message, null);
	}

	public static void warn(Object source, boolean debug, String message) {
		warn(source, debug, message, null);
	}

	public static void warn(Object source, String message, Throwable e) {
		warn(source, true, message, e);
	}

	public static void warn(Object source, boolean debug, String message, Throwable e) {
		if (!debug) return;
		logger = Logger.getLogger(source.getClass());
		if (e == null) {
			logger.warn(message);
		} else {
			logger.warn(message, e);
		}
	}

	public static void error(Object source, String message) {
		error(source, true, message, null);
	}

	public static void error(Object source, boolean debug, String message) {
		error(source, debug, message, null);
	}

	public static void error(Object source, String message, Throwable e) {
		error(source, true, message, e);
	}

	public static void error(Object source, boolean debug, String message, Throwable e) {
		if (!debug) return;
		logger = Logger.getLogger(source.getClass());
		if (e == null) {
			logger.error(message);
		} else {
			logger.error(message, e);
		}
	}

	public static void fatal(Object source, String message) {
		fatal(source, true, message, null);
	}

	public static void fatal(Object source, boolean debug, String message) {
		fatal(source, debug, message, null);
	}

	public static void fatal(Object source, String message, Throwable e) {
		fatal(source, true, message, e);
	}

	public static void fatal(Object source, boolean debug, String message, Throwable e) {
		if (!debug) return;
		logger = Logger.getLogger(source.getClass());
		if (e == null) {
			logger.fatal(message);
		} else {
			logger.fatal(message, e);
		}
	}
}
>>

ReflectClass(packageName) ::= <<
package %packageName%.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Reflect {

	private Reflect() {}

	public static void set(Object target, String fieldName, Object value) {
		try {
			Field f = target.getClass().getDeclaredField(fieldName);
			f.setAccessible(true);
			f.set(target, value);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
	}

	public static void setSuper(Object target, String fieldName, Object value) {
		try {
			Field f = target.getClass().getSuperclass().getDeclaredField(fieldName);
			f.setAccessible(true);
			f.set(target, value);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
	}

	public static Object get(Object target, String fieldName) {
		try {
			Field f = target.getClass().getDeclaredField(fieldName);
			f.setAccessible(true);
			return f.get(target);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object getSuper(Object target, String fieldName) {
		try {
			Field f = target.getClass().getSuperclass().getDeclaredField(fieldName);
			f.setAccessible(true);
			return f.get(target);
		} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object invoke(Object target, String methodName, Class<?>[] params, Object[] args) {

		try {
			Method m = target.getClass().getMethod(methodName, params);
			m.setAccessible(true);
			return m.invoke(target, args);
		} catch (SecurityException | NoSuchMethodException | IllegalArgumentException
				| IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object invokeSuperDeclared(Object target, String methodName, Class<?>[] params, Object[] args) {

		try {
			Method m = target.getClass().getSuperclass().getDeclaredMethod(methodName, params);
			m.setAccessible(true);
			return m.invoke(target, args);
		} catch (SecurityException | NoSuchMethodException | IllegalArgumentException
				| IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static Object make(Class<?> clazz, Object[] args) {
		Constructor<?> c = clazz.getDeclaredConstructors()[0];
		c.setAccessible(true);
		Object object = null;
		try {
			object = c.newInstance(args);
		} catch (SecurityException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		}
		return object;
	}
}
>>
