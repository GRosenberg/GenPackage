delimiters "%", "%"

IContextDescriptorClass(packageName) ::= <<
package %packageName%.converter;

public interface IContextDescriptor {

	public String toString();

}
>>

NodeContextDescriptorClass(packageName) ::= <<
package %packageName%.converter;

import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;

public class NodeContextDescriptor implements IContextDescriptor {

	public static final String SP	= " ";
	public static final String RN	= "\r\n";
	public static final String DOT	= ".";
	public static final String STAR	= "*";
	public static final String HASH	= "#";

	public ParserRuleContext<Token> ctx; // current context
	public CommonTokenStream tokens; // the reference token stream

	public String commentLeft;
	public String commentRight;

	public boolean collectComments = false; 
	public boolean resolved = false; // whether all child nodes have been hoisted

	public NodeContextDescriptor(ParserRuleContext<Token> ctx, CommonTokenStream tokens) {
		this.ctx = ctx;
		this.tokens = tokens;
	}
}
>>

ContextDescriptorClass(packageName, grammarName, genName) ::= <<
package %packageName%.converter.descriptors;

import %packageName%.converter.NodeContextDescriptor;
import %packageName%.parser.gen.%grammarName%Parser.%genName%Context;

import org.antlr.v4.runtime.CommonTokenStream;

public class %genName%ContextDescriptor extends NodeContextDescriptor {

	public String statement;
	public String value;

	public %genName%ContextDescriptor(%genName%Context ctx, CommonTokenStream tokens) {
		super(ctx, tree, tokens);
	}

	public String toString() {
		if (resolved) {
			if (collectComments) {
				return commentLeft + statement + SP + value + SP + commentRight;
			} else {
				return statement + SP + value;
			}
		}
		return "";
	}
}
>>
