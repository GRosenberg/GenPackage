delimiters "$", "$"
import "..\libs\Header.stg"

ErrorListenerClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ErrorListenerClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ErrorListenerClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ErrorListenerClass(packageName, grammarName) ::= <<
$hdrBeg()$
$ErrorListenerClassCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$ErrorListenerClassContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$ErrorListenerClassVersion()$
$hdrBlankLn()$
$hdrEnd()$
package $packageName$.parser;

import java.util.List;

import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.Token;

import $packageName$.parser.gen.$grammarName$Lexer;
import $packageName$.util.Log;

public class $grammarName$ErrorListener extends BaseErrorListener {

	public int lastError = -1;

	@Override
	public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int line, int charPositionInLine,
			String msg, RecognitionException e) {

		Parser parser = (Parser) recognizer;
		String name = parser.getSourceName();
		CommonTokenStream tokens = (CommonTokenStream) parser.getInputStream();
		tokens.fill();

		Token offSymbol = (Token) offendingSymbol;
		int thisError = offSymbol.getTokenIndex();
		if (offSymbol.getType() == -1 && thisError == tokens.size() - 1) {
			Log.debug(this, name + ": Incorrect error: " + msg);
			return;
		\}

		String offSymName = $grammarName$Lexer.VOCABULARY.getSymbolicName(offSymbol.getType());
		List<String> stack = parser.getRuleInvocationStack();
		// Collections.reverse(stack);

		Log.error(this, name);
		Log.error(this, "Rule stack: " + stack);
		Log.error(this, "At line " + line + ":" + charPositionInLine + " at " + offSymName + ": " + msg);
		Log.error(this, "Expecting: " + parser.getExpectedTokens().toString($grammarName$Lexer.VOCABULARY));

		if (thisError > lastError + 10) {
			lastError = thisError - 10;
		\}
		int leadError = thisError + 10 < tokens.size() ? thisError + 10 : tokens.size() - thisError;

		for (int idx = lastError + 1; idx < leadError; idx++) {
			Token token = tokens.get(idx);
			if (token.getChannel() != Token.HIDDEN_CHANNEL) Log.error(this, token.toString());
		\}
		lastError = thisError;
	\}
\}

>>

LexerGrammarCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

LexerGrammarContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

LexerGrammarVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

LexerGrammar(packageName, grammarName) ::= <<
$hdrBeg()$
$LexerGrammarCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$LexerGrammarContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$LexerGrammarVersion()$
$hdrBlankLn()$
$hdrEnd()$
lexer grammar $grammarName$Lexer;

@header {
	package $packageName$.parser.gen;
\}

@members {
	// semantic alias for the default mode
	public static final int Base = DEFAULT_MODE;
\}

// LEXER /////////////////////////////////////////////

////////////// Default Mode (alias Base) ///////////////////
// mode Base;

Colon	: COLON		;
Sep		: COMMA		;
OBrace	: LBRACE 	;
CBrace 	: RBRACE 	;
OBracket: LBRACKET 	;
CBracket: RBRACKET 	;
True	: TRUE 		;
False	: FALSE 	;
Null	: NULL 		;


// -------------------
// Strings and Numbers

Number	: INT FRAC EXP? 
		| INT EXP 
		| INT
		;

String	: LITERAL ;		


// Multi-line comments handled as a single token
Comment
    : ML_COMMENT  -> channel(HIDDEN) 
    ;

// group one or more consecutive line comments together,  
// excluding the final line terminal(s), as a single token
CommentLine
	: SL_COMMENT -> channel(HIDDEN)
	;

// all other horizontal and vertical whitespace is separately tokenized
HorzWS
	: HWS	-> channel(HIDDEN)
	;

VertWS
	: VWS	-> channel(HIDDEN)
	;


/////////////////// FRAGMENTS //////////////////

// -------------------
// Constants

fragment TRUE		: 'true'  ;
fragment FALSE		: 'false' ;
fragment NULL		: 'null'  ;

// -------------------
// Letters, Numbers and Quoted things

fragment IDENT			: LETTER | DIGIT | UNDERSCORE | MINUS ;
fragment LETTER			: LETTER_UPPER | LETTER_LOWER ;
fragment LETTER_UPPER	: 'A'..'Z' ;
fragment LETTER_LOWER	: 'a'..'z' ;
fragment DIGIT			: '0'..'9' ;
fragment INT			: [-]? ('0' | [1-9] DIGIT*);
fragment FRAC			: '.' DIGIT+;
fragment EXP			: [eE] [+\\-]? DIGIT+;

fragment HEX 		:	[0-9a-fA-F] ;
fragment UNICODE	:   'u' HEX HEX HEX HEX ;

fragment ESC		// Any escaped character
	:	'\\\\' 
		(	[btnfr"'\\\\/]		// ordinary escaped characters
		|	UNICODE				// Java style Unicode escape sequence
		)
	;

fragment LITERAL
    :  '"'  ( ESC_SEQ | ~["\\\\] )* '"'
	|  '\\'' ( ESC_SEQ | ~['\\\\] )* '\\''
    ;


// -----------
// Punctuation

fragment AT			: '@'	;
fragment COLON		: ':'	;
fragment SEMI		: ';'	;
fragment LBRACE		: '{'	;
fragment RBRACE		: '\}'	;
fragment LBRACKET	: '['	;
fragment RBRACKET	: ']'	;
fragment LPAREN		: '('	;
fragment RPAREN		: ')'	;

fragment LMARK		: '<'	;
fragment RMARK		: '|>'	;
fragment LTMPL		: '{{'	; 
fragment RTMPL		: '\}\}'	; 

fragment DOT		: '.'	;
fragment HASH		: '#'	;
fragment REF		: '\$'	;

fragment COMMA		: ','	;
fragment UNDERSCORE	: '_'	;
fragment PIPE		: '|'	;

fragment OP			: PLUS | MINUS | MULT | DIV | MOD ;
fragment PLUS		: '+'	;
fragment MINUS		: '-'	;
fragment MULT		: '*'	;
fragment DIV		: '/'	;
fragment MOD		: '%'	;

fragment FUNCTION	: ADD | SUB | MUL_EQ | DIV_EQ | MOD_EQ | EQV | NEQ | LT | LTE | GT | GTE | EQ ;
fragment EQ			: '='	;
fragment EQV		: '=='	;
fragment NEQ		: '!='	;
fragment LT			: '<'	;
fragment LTE		: '<='	;
fragment GT			: '>'	;
fragment GTE		: '>='	;
fragment ADD		: '+='	;
fragment SUB		: '-='	;
fragment MUL_EQ		: '*='	;
fragment DIV_EQ		: '/='	;
fragment MOD_EQ		: '%='	;


// ----------
// Whitespace, etc.

fragment SL_COMMENT		: '//' ~'\\n'* ( '\\n' HWS* '//' ~'\\n'* )*	;

fragment ML_COMMENT		: '/*' .*? '*/'
						| '<!--' .*? '-->' 
						;

fragment HWS			:  [ \\t\\r] ;
fragment VWS			:  [\\n\\u000C] ;

fragment ESC_SEQ		:   '\\\\' ('b'|'t'|'n'|'f'|'r') ;


>>

LexerErrorStrategyClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

LexerErrorStrategyClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

LexerErrorStrategyClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

LexerErrorStrategyClass(packageName, grammarName) ::= <<
$hdrBeg()$
$LexerErrorStrategyClassCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$LexerErrorStrategyClassContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$LexerErrorStrategyClassVersion()$
$hdrBlankLn()$
$hdrEnd()$
package $packageName$.parser;

import $packageName$.parser.gen.$grammarName$Lexer;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.LexerNoViableAltException;

/**
 * Base class for the Lexer. Combines functionality for <br>
 * <ul>
 * <li>lexer error strategy</li>
 * <li>various helper routines</li>
 * <ul>
 * 
 * @author Gbr
 * 
 */
public class $grammarName$LexerErrorStrategy extends $grammarName$Lexer {

	// ///// Error strategy /////////////////////////////
	public $grammarName$LexerErrorStrategy(CharStream input) {
		super(input);
	\}

	public void recover(LexerNoViableAltException e) {
		// throw new RuntimeException(e); // Bail out
		super.recover(e);
	\}

	// ///// Parse stream management ////////////////////

\}


>>

ParserGrammarCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ParserGrammarContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ParserGrammarVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ParserGrammar(packageName, grammarName, startRule) ::= <<
$hdrBeg()$
$ParserGrammarCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$ParserGrammarContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$ParserGrammarVersion()$
$hdrBlankLn()$
$hdrEnd()$
parser grammar $grammarName$Parser;

options {
	tokenVocab = $grammarName$Lexer;
\}

@header {
	package $packageName$.parser.gen;
\}

@members {
	public boolean LA(int... expected) {
		int t = ((CommonTokenStream) _input).LA(1);
		for (int e : expected) {
			if (e == t) return true;
		\}
		return false;
	\}
\}

// PARSER /////////////////////////////////////////////

$startRule$
	: ( object | array )* EOF
	;	

object
	: OBrace element (Sep element)* CBrace
	| OBrace CBrace
	;

element
	: String Colon value
	;	

array
	: OBracket f=value (Sep g+=value)* CBracket
	| OBracket CBracket
	;


value
	: String
	| Number
	| object  
	| array  
	| True 
	| False
	| Null
	;


>>

ParserErrorStrategyClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ParserErrorStrategyClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ParserErrorStrategyClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ParserErrorStrategyClass(packageName, grammarName) ::= <<
$hdrBeg()$
$ParserErrorStrategyClassCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$ParserErrorStrategyClassContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$ParserErrorStrategyClassVersion()$
$hdrBlankLn()$
$hdrEnd()$
package $packageName$.parser;

/***
 * Excerpted from "The Definitive ANTLR 4 Reference",
 * published by The Pragmatic Bookshelf.
 * Copyrights apply to this code. It may not be used to create training material, 
 * courses, books, articles, and the like. Contact us if you are in doubt.
 * We make no guarantees that this code is fit for any purpose. 
 * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.
 ***/
import org.antlr.v4.runtime.DefaultErrorStrategy;
import org.antlr.v4.runtime.InputMismatchException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Token;

public class $grammarName$ParserErrorStrategy extends DefaultErrorStrategy {

	/**
	 * Instead of recovering from exception e, Re-throw wrote it wrapped in a generic
	 * RuntimeException so it is not caught by the rule function catches. Exception e is the "cause"
	 * of the RuntimeException.
	 */
	@Override
	public void recover(Parser recognizer, RecognitionException e) {
		throw new RuntimeException(e);
	\}

	/**
	 * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't
	 * throw an exception.
	 */
	@Override
	public Token recoverInline(Parser recognizer) throws RecognitionException {
		throw new RuntimeException(new InputMismatchException(recognizer));
	\}

	/** Make sure we don't attempt to recover from problems in subrules. */
	@Override
	public void sync(Parser recognizer) {\}
\}


>>

TokenClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

TokenClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

TokenClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

TokenClass(packageName, grammarName) ::= <<
$hdrBeg()$
$TokenClassCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$TokenClassContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$TokenClassVersion()$
$hdrBlankLn()$
$hdrEnd()$
package $packageName$.parser;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CommonToken;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenSource;
import org.antlr.v4.runtime.misc.Pair;

import $packageName$.parser.gen.$grammarName$Lexer;
import $packageName$.types.ToStringStyle;

@SuppressWarnings("serial")
public class $grammarName$Token extends CommonToken {

	private ToStringStyle tss = ToStringStyle.BASIC;

	// Lexer mode
	private int _mode;
	private boolean hasStyles;
	private boolean hasBody;

	public $grammarName$Token(int type, String text) {
		super(type, text);
	\}

	public $grammarName$Token(Token prior) {
		super(prior);
	\}

	public $grammarName$Token(Pair<TokenSource, CharStream> source, int type, int channel, int start, int stop) {
		super(source, type, channel, start, stop);
	\}

	public void setMode(int mode) {
		_mode = mode;
	\}

	public void toStringStyle(ToStringStyle tss) {
		this.tss = tss;
	\}

	private boolean isFull() {
		return tss == ToStringStyle.FULL;
	\}

	public void styles(boolean hasStyles) {
		this.hasStyles = hasStyles;
	\}

	public void body(boolean hasBody) {
		this.hasBody = hasBody;
	\}

	public boolean styles() {
		return hasStyles;
	\}

	public boolean body() {
		return hasBody;
	\}

	public boolean isTag() {
		char c = getText().charAt(0);
		return Character.isUpperCase(c);
	\}

	@Override
	public String toString() {
		if (tss == ToStringStyle.MIN) return super.toString();

		String chanStr = "chan=" + channel;
		if (channel == 0) chanStr = isFull() ? "chan=Default" : "";
		if (channel == 1) chanStr = isFull() ? "chan=Hidden" : "Hidden";

		String modeStr = (isFull() ? "mode=" : "") + $grammarName$Lexer.modeNames[_mode];
		if (_mode == 0) modeStr = isFull() ? "mode=Default" : "";

		String mcStr = chanStr + " " + modeStr;
		mcStr = mcStr.trim();

		String txt = getText();
		if (txt != null) {
			txt = txt.replaceAll("\\n", "\\\\n");
			txt = txt.replaceAll("\\r", "\\\\r");
			txt = txt.replaceAll("\\t", "\\\\t");
		\} else {
			txt = "<no text>";
		\}
		String tokenName = $grammarName$Lexer.VOCABULARY.getSymbolicName(type);
		return "[@" + getTokenIndex() + ", <" + start + ":" + stop + "> "
				+ tokenName + "(" + type + ")='" + txt + "'"
				+ ", " + chanStr + ", " + modeStr
				+ ", " + line + ":" + getCharPositionInLine() + "]";
	\}
\}


>>

TokenFactoryClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

TokenFactoryClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

TokenFactoryClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

TokenFactoryClass(packageName, grammarName) ::= <<
$hdrBeg()$
$TokenFactoryClassCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$TokenFactoryClassContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$TokenFactoryClassVersion()$
$hdrBlankLn()$
$hdrEnd()$
package $packageName$.parser;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenFactory;
import org.antlr.v4.runtime.TokenSource;
import org.antlr.v4.runtime.misc.Pair;

import $packageName$.parser.gen.$grammarName$Lexer;
import $packageName$.types.ToStringStyle;

public class $grammarName$TokenFactory implements TokenFactory<$grammarName$Token> {

	public CharStream input;
	public ToStringStyle style;

	public $grammarName$TokenFactory(CharStream input) {
		this.input = input;
		this.style = ToStringStyle.FULL;
	\}

	public void toStringStyle(ToStringStyle style) {
		this.style = style;
	\}

	public $grammarName$Token create(Token prior, int type, String text) {
		$grammarName$Token token = new $grammarName$Token(prior);
		token.setType(type);
		token.setText(text);
		token.setChannel(Token.DEFAULT_CHANNEL);
		token.toStringStyle(style);
		return token;
	\}

	@Override
	public $grammarName$Token create(int type, String text) {
		$grammarName$Token token = new $grammarName$Token(type, text);
		token.toStringStyle(style);
		return token;
	\}

	@Override
	public $grammarName$Token create(Pair<TokenSource, CharStream> source, int type, String text,
			int channel, int start, int stop, int line, int charPositionInLine) {
		$grammarName$Token token = new $grammarName$Token(source, type, channel, start, stop);
		token.setLine(line);
		token.setCharPositionInLine(charPositionInLine);
		TokenSource tsrc = token.getTokenSource();
		token.setMode((($grammarName$Lexer) tsrc)._mode);
		token.toStringStyle(style);
		return token;
	\}
\}


>>

LexerAdaptorClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

LexerAdaptorClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

LexerAdaptorClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

LexerAdaptorClass(packageName, grammarName) ::= <<
$hdrBeg()$
$LexerAdaptorClassCopyright()$
$epl()$
$hdrBlankLn()$
$hdrContribPrefix()$
$LexerAdaptorClassContributor()$
$hdrBlankLn()$
$hdrVersionPrefix()$
$LexerAdaptorClassVersion()$
$hdrBlankLn()$
$hdrEnd()$
package $packageName$.parser;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Lexer;

public abstract class LexerAdaptor extends Lexer {

	public LexerAdaptor(CharStream input) {
		super(input);
	\}

\}

>>
