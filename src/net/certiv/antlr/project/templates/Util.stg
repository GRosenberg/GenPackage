delimiters "%", "%"
import "D:\DevFiles\Java\WorkSpaces\Main\GenProject\src\net\certiv\antlr\project\libs\Header.stg"

FileUtilsClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

FileUtilsClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

FileUtilsClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 		1.2 - 2014.11.01: Fixed default logger bug
 * 
>>

FileUtilsClass(packageName) ::= <<
%hdrBeg()%
%FileUtilsClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%FileUtilsClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%FileUtilsClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Replaces commons.*
 */
public class FileUtils {

	private FileUtils() {\}

	/**
	 * Returns file content as string, reading from a path. Throws runtime exception in case of FileNotFoundException or
	 * IOException.
	 * 
	 * @param filename
	 * @return the given file content
	 * @throws IOException
	 */
	public static String read(String filename) throws IOException {
		File file = new File(filename);
		return read(file);
	\}

	public static String read(File file) throws IOException {
		BufferedReader reader = Files.newBufferedReader(file.toPath());
		StringBuilder sb = new StringBuilder();
		int c = reader.read();
		while (c != -1) {
			sb.append((char) c);
			c = reader.read();
		\}
		return sb.toString();
	\}

	/**
	 * Returns file content as string, reading from a url. Throws runtime exception in case of FileNotFoundException or
	 * IOException.
	 * 
	 * @param fileurl the url of the file to read.
	 * @return file content as string.
	 * @throws URISyntaxException
	 * @throws IOException
	 */
	public static String read(URL url) throws URISyntaxException, IOException {
		File file = toFile(url);
		return read(file);
	\}

	public static File toFile(URL url) throws URISyntaxException {
		return new File(url.toURI());
	\}

	/**
	 * Writes a string to the specified file using the default encoding.
	 * 
	 * If the file path doesn't exist, it's created. If the file exists, it is overwritten.
	 * 
	 * @param pathname the path to the file.
	 * @param data the string to write.
	 * @throws IOException
	 */
	public static void writeFile(String pathname, String data) throws IOException {
		write(new File(pathname), data, false);
	\}

	public static void write(File file, String data, boolean append) throws IOException {
		Set<OpenOption> options = new HashSet<OpenOption>();
		options.add(StandardOpenOption.CREATE);
		options.add(StandardOpenOption.WRITE);
		if (append) {
			options.add(StandardOpenOption.APPEND);
		\} else {
			options.add(StandardOpenOption.TRUNCATE_EXISTING);
		\}
		write(file, data, options.toArray(new OpenOption[options.size()]));
	\}

	private static void write(File file, String data, OpenOption... options) throws IOException {
		Path path = file.toPath();
		Files.write(path, data.getBytes(), options);
	\}

	public static Charset charsetForNameOrDefault(String encoding) {
		Charset charset = (encoding == null) ? Charset.defaultCharset() : Charset.forName(encoding);
		return charset;
	\}

	/**
	 * Replaces all backslashes with slash char. Throws NPE if the original path is null.
	 * 
	 * @param original the path to normalize.
	 * @return the normalized path
	 */
	public static String normalizePathname(String pathname) {
		return pathname.replaceAll("\\\\\\\\", "/");
	\}

	/**
	 * Returns the pathname of f relative to the directory d
	 * 
	 * @param d
	 * @param f
	 * @return
	 */
	public static String relative(File d, File f) {
		String dPath = d.getAbsolutePath();
		String fPath = f.getAbsolutePath();
		if (fPath.startsWith(dPath)) {
			fPath = fPath.substring(dPath.length());
			fPath = normalizePathname(fPath);
			if (fPath.startsWith("/")) {
				fPath = fPath.substring(1);
			\}
		\}
		return fPath;
	\}

	/**
	 * Concats pathname parts - returns a normalized pathname
	 * 
	 * @param base
	 * @param parts
	 * @return
	 */
	public static String concat(String base, String... parts) {
		Path path = Paths.get(base, parts);
		return normalizePathname(path.toString());
	\}

	public static String extent(String pathname) {
		if (pathname != null) {
			int dot = pathname.lastIndexOf(".");
			if (dot != -1 && dot + 1 < pathname.length() - 1) {
				return pathname.substring(dot + 1);
			\}
		\}
		return "";
	\}

	/**
	 * Change or remove file extension.
	 * 
	 * @param pathname
	 * @param ext
	 */
	public static String changeExtent(String pathname, String ext) {
		if (ext == null) ext = "";
		if (ext.length() > 0 && !ext.startsWith(".")) ext = "." + ext;
		int dot = pathname.lastIndexOf(".");
		if (dot != -1) {
			return pathname.substring(0, dot) + ext;
		\}
		return pathname + ext;
	\}

	public static int pathDepth(File f) {
		String pathname = normalizePathname(f.getPath());
		if (pathname.endsWith("/")) {
			pathname = pathname.substring(0, pathname.length() - 2);
		\}
		String[] p = pathname.split(":/");
		if (p.length > 1) {
			pathname = p[1];
		\}
		p = pathname.split("/");
		return p.length;
	\}

	/**
	 * Walks file tree returning list of files found with matching file extents that exist within the given depth offset
	 * from the starting directory and that are accessible.
	 * 
	 * @param f starting directory
	 * @param exts list (array) of acceptable extents
	 * @param depth allowed directory depth offset from the starting directory
	 * @return
	 */
	public static Collection<File> listFiles(File f, String[] exts, int depth) {
		List<File> files = new ArrayList<>();
		if (f.isDirectory()) {
			int d = pathDepth(f) + depth;
			FilterFileExts filter = new FilterFileExts(files, exts, d);
			try {
				Files.walkFileTree(f.toPath(), filter);
			\} catch (IOException e) {\}
		\}
		return files;
	\}

	public static class FilterFileExts extends SimpleFileVisitor<Path> {

		private List<File> files;
		private String[] exts;
		private int depth;

		public FilterFileExts(List<File> files, String[] exts, int depth) {
			super();
			this.files = files;
			this.exts = new String[exts.length];
			this.depth = depth;
			for (int idx = 0; idx < exts.length; idx++) {
				if (exts[idx].startsWith(".")) {
					this.exts[idx] = exts[idx].substring(1);
				\} else {
					this.exts[idx] = exts[idx];
				\}
			\}
		\}

		@Override
		public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
			File f = dir.toFile();
			if (pathDepth(f) <= depth) {
				return FileVisitResult.CONTINUE;
			\} else {
				return FileVisitResult.SKIP_SIBLINGS;
			\}
		\}

		@Override
		public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) throws IOException {
			File f = path.toFile();
			if (f.isFile()) {
				String pExt = extent(path.toString());
				if (pExt.length() > 0) {
					for (String e : exts) {
						if (e.equals(pExt)) {
							files.add(f);
							return FileVisitResult.CONTINUE;
						\}
					\}
				\}
			\}
			return FileVisitResult.CONTINUE;
		\}
	\}
\}

>>

LogClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

LogClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

LogClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 		1.2 - 2014.11.01: Fixed default logger bug
 * 
>>

LogClass(packageName) ::= <<
%hdrBeg()%
%LogClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%LogClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%LogClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.util;

import java.util.HashMap;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.core.appender.ConsoleAppender;
import org.apache.logging.log4j.core.config.AbstractConfiguration;
import org.apache.logging.log4j.core.layout.PatternLayout;
import org.apache.logging.log4j.message.Message;
import org.apache.logging.log4j.message.MessageFactory;
import org.apache.logging.log4j.spi.ExtendedLogger;
import org.apache.logging.log4j.spi.ExtendedLoggerWrapper;

public class Log extends ExtendedLoggerWrapper {

	private static final long serialVersionUID = 1L;
	private static final String CONSOLE = "Console";
	private static final String OUTPUT = "SYSTEM_OUT";

	private static Logger logger;
	private static final String FQCN = Log.class.getName();

	private static HashMap<Integer, LogLevel> logLevels = new HashMap<>();
	private static int LogId = Log.class.hashCode();
	private static boolean minOut;
	private static AbstractAppender stdAppender;
	private static ConsoleAppender testAppender;

	// set the global default log value
	static {
		setLevel(LogId, LogLevel.Warn);
	\}

	public Log(ExtendedLogger logger, String name, MessageFactory messageFactory) {
		super(logger, name, messageFactory);
	\}

	@Override
	public void logMessage(String fqcn, Level level, Marker marker, Message message, Throwable t) {
		super.logMessage(FQCN, level, marker, message, t);
	\}

	/**
	 * Sets a log level as a default for a class type. In the absence of a class specific level, the global default is
	 * applied. For a log message to be printed, the log level must be GTE the log level set for the source class.
	 */
	public static void defLevel(LogLevel level) {
		setLevel(null, level);
	\}

	public static void defLevel(String level) {
		setLevel(null, level);
	\}

	public static void setLevel(Object source, String level) {
		if (level == null) return;
		level = Strings.titleCase(level);
		setLevel(source, LogLevel.valueOf(level));
	\}

	public static void setLevel(Object source, LogLevel level) {
		if (source == null && level == null) return;
		if (source == null) source = LogId;
		if (level == null) level = defaultLogLevel();

		int id = source.hashCode();
		String name = objNameOf(source);

		logLevels.put(id, level);
		if (id == LogId) {
			debug(Log.class, "Default logging level set [level=" + level.toString() + "]");
		\} else {
			debug(Log.class, "Class Logging level set [class=" + name + ", level=" + level.toString() + "]");
		\}
	\}

	public static void setTestMode(boolean testMode) {
		minOut = testMode;

		LoggerContext ctx = (LoggerContext) LogManager.getContext();
		AbstractConfiguration cfg = (AbstractConfiguration) ctx.getConfiguration();
		if (stdAppender == null) {
			stdAppender = (AbstractAppender) cfg.getAppender(CONSOLE);
		\}
		if (testAppender == null) {
			PatternLayout testLayout = PatternLayout.createDefaultLayout();
			testAppender = ConsoleAppender.createAppender(testLayout, null, OUTPUT, CONSOLE, "false", "true");
		\}

		if (minOut) {
			cfg.removeAppender(CONSOLE);
			cfg.addAppender(testAppender);
		\} else {
			cfg.removeAppender(CONSOLE);
			cfg.addAppender(stdAppender);
		\}
		ctx.updateLoggers();
	\}

	private static LogLevel logLevelOf(Object source) {
		if (source == null) return defaultLogLevel();
		LogLevel level = logLevels.get(source.hashCode());
		if (level == null) return defaultLogLevel();
		return level;
	\}

	private static LogLevel defaultLogLevel() {
		return logLevels.get(LogId);
	\}

	private static boolean loggable(Object source, LogLevel level) {
		LogLevel srcLevel = logLevelOf(source);
		if (level.value() > srcLevel.value()) return false;
		return true;
	\}

	private static String objNameOf(Object source) {
		String fqname = source.getClass().getName();
		int dot = fqname.lastIndexOf('.');
		String name = dot > -1 ? fqname.substring(dot + 1) : fqname;
		return name;
	\}

	// /////////////////////////////////////////////////////////////////////////

	public static void trace(Object source, String message) {
		log(source, LogLevel.Trace, message, null);
	\}

	public static void trace(Object source, String message, Throwable e) {
		log(source, LogLevel.Trace, message, e);
	\}

	public static void debug(Object source, String message) {
		log(source, LogLevel.Debug, message, null);
	\}

	public static void debug(Object source, String message, Throwable e) {
		log(source, LogLevel.Debug, message, e);
	\}

	public static void info(Object source, String message) {
		log(source, LogLevel.Info, message, null);
	\}

	public static void info(Object source, String message, Throwable e) {
		log(source, LogLevel.Info, message, e);
	\}

	public static void warn(Object source, String message) {
		log(source, LogLevel.Warn, message, null);
	\}

	public static void warn(Object source, String message, Throwable e) {
		log(source, LogLevel.Warn, message, e);
	\}

	public static void error(Object source, String message) {
		log(source, LogLevel.Error, message, null);
	\}

	public static void error(Object source, String message, Throwable e) {
		log(source, LogLevel.Error, message, e);
	\}

	public static void fatal(Object source, String message) {
		log(source, LogLevel.Fatal, message, null);
	\}

	public static void fatal(Object source, String message, Throwable e) {
		log(source, LogLevel.Fatal, message, e);
	\}

	public static void log(Object source, LogLevel lvl, String message) {
		log(source, lvl, message, null);
	\}

	private static void log(Object source, LogLevel srcLevel, String message, Throwable e) {
		if (loggable(source, srcLevel)) {
			if (source == null) source = Log.class;
			logger = PrivateManager.getLogger(source.getClass().getName());
			switch (srcLevel) {
				case Trace:
					logger.trace(message, e);
					break;
				case Debug:
					logger.debug(message, e);
					break;
				case Info:
					logger.info(message, e);
					break;
				case Warn:
					logger.warn(message, e);
					break;
				case Error:
					logger.error(message, e);
					break;
				case Fatal:
					logger.fatal(message, e);
					System.exit(1);
					break;
			\}
		\}
	\}

	public static enum LogLevel {
		Fatal(0),
		Error(1),
		Warn(2),
		Info(3),
		Debug(4),
		Trace(5);

		private int value;

		LogLevel(int value) {
			this.value = value;
		\}

		public int value() {
			return value;
		\}

		public boolean check(Object source) {
			if (source == null) return false;
			return this.value <= logLevelOf(source).value;
		\}
	\}

	private static class PrivateManager extends LogManager {

		public static LoggerContext getContext() {
			return (LoggerContext) getContext(FQCN, false);
		\}

		public static ExtendedLogger getLogger(final String name) {
			return new Log(getContext().getLogger(name), "", null);
		\}
	\}
\}


>>

ReflectClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ReflectClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ReflectClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ReflectClass(packageName) ::= <<
%hdrBeg()%
%ReflectClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%ReflectClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%ReflectClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Reflect {

	public static final Class<?>[] emptyParams = new Class[] {\};
	public static final Object[] emptyArgs = new Object[] {\};

	private Reflect() {\}

	public static void set(Object target, String fieldName, Object value) {
		try {
			Field f = target.getClass().getDeclaredField(fieldName);
			f.setAccessible(true);
			f.set(target, value);
		\} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		\}
	\}

	public static void setSuper(Object target, String fieldName, Object value) {
		try {
			Field f = target.getClass().getSuperclass().getDeclaredField(fieldName);
			f.setAccessible(true);
			f.set(target, value);
		\} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		\}
	\}

	public static Object get(Object target, String fieldName) {
		try {
			Field f = target.getClass().getDeclaredField(fieldName);
			f.setAccessible(true);
			return f.get(target);
		\} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		\}
		return null;
	\}

	public static Object getSuper(Object target, String fieldName) {
		try {
			Field f = target.getClass().getSuperclass().getDeclaredField(fieldName);
			f.setAccessible(true);
			return f.get(target);
		\} catch (SecurityException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		\}
		return null;
	\}

	public static Object invoke(boolean quiet, Object target, String methodName) {
		return invoke(quiet, target, methodName, emptyParams, emptyArgs);
	\}

	public static Object invoke(boolean quiet, Object target, String methodName, Object... args) {
		if (args == null) {
			return invoke(quiet, target, methodName, emptyParams, emptyArgs);
		\}
		Class<?>[] params = new Class[args.length];
		for (int idx = 0; idx < args.length; idx++) {
			params[idx] = args[idx].getClass();
		\}
		return invoke(quiet, target, methodName, params, args);
	\}

	public static Object invoke(boolean quiet, Object target, String methodName, Class<?>[] params, Object[] args) {

		try {
			Method m = target.getClass().getMethod(methodName, params);
			m.setAccessible(true);
			return m.invoke(target, args);
		\} catch (SecurityException | NoSuchMethodException | IllegalArgumentException
				| IllegalAccessException | InvocationTargetException e) {
			if (!quiet) e.printStackTrace();
		\}
		return null;
	\}

	public static Object invokeSuperDeclared(Object target, String methodName, Class<?>[] params, Object[] args) {

		try {
			Method m = target.getClass().getSuperclass().getDeclaredMethod(methodName, params);
			m.setAccessible(true);
			return m.invoke(target, args);
		\} catch (SecurityException | NoSuchMethodException | IllegalArgumentException
				| IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		\}
		return null;
	\}

	public static Map<String, Class<?\>> declaredClasses(Object target) {
		Map<String, Class<?\>> classNames = new HashMap<>();
		for (Class<?> c : target.getClass().getDeclaredClasses()) {
			classNames.put(c.getSimpleName(), c);
		\}
		return classNames;
	\}

	public static Object make(Class<?> clazz, Object[] args) {
		Constructor<?> c = clazz.getDeclaredConstructors()[0];
		c.setAccessible(true);
		Object object = null;
		try {
			object = c.newInstance(args);
		\} catch (SecurityException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
			e.printStackTrace();
		\}
		return object;
	\}

	public static String simpleClassName(Object arg) {
		String name = arg.getClass().getCanonicalName();
		if (name != null) {
			int mark = name.lastIndexOf('.');
			if (mark > 0) {
				return name.substring(mark + 1);
			\}
		\}
		return "<unknown>";
	\}

	public static <T> T instantiate(final String className, final Class<T> type) {
		try {
			return type.cast(Class.forName(className).newInstance());
		\} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
			e.printStackTrace();
		\}
		return null;
	\}

	public static List<String> getMethodNames(Object target, String prefix) {
		List<String> results = new ArrayList<>();
		try {
			Method[] methods = target.getClass().getMethods();
			for (int idx = 0; idx < methods.length; idx++) {
				Method method = methods[idx];
				if (method.getName().startsWith(prefix)) {
					results.add(method.getName());
				\}
			\}
		\} catch (SecurityException | IllegalArgumentException e) {
			e.printStackTrace();
		\}
		return results;
	\}
\}

>>

StringsClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

StringsClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

StringsClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

StringsClass(packageName) ::= <<
%hdrBeg()%
%StringsClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%StringsClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%StringsClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import %packageName%.converter.Value;

import org.apache.commons.io.FilenameUtils;

public class Strings {

	/** Platform dependent end-of-line marker */
	public static final String eol = System.lineSeparator();
	/** Platform dependent path separator mark as char */
	public static final char pathSep = File.separatorChar;
	/** Platform dependent path separator mark as string */
	public static final String pathSepStr = File.separator;
	/** Platform dependent path separator mark */
	public static final String pkgSep = ".";
	/** classpath (and unix) separator) */
	public static final String STD_SEPARATOR = "/";
	// Windows separator character.
	private static final String WINDOWS_SEPARATOR = "\\\\\\\\";

	public static final String SP = " ";
	public static final String RN = "\\r\\n";
	public static final String DOT = ".";
	public static final String STAR = "*";
	public static final String HASH = "#";

	/** Reference characters */
	private static char[] R = { '$', '@', '.', '#' \};

	/** Quoting character pairs */
	private static char[][] Q = {
			{ '\\'', '\\'' \},
			{ '\\"', '\\"' \},
			{ '[', ']' \},
			{ '(', ')' \},
			{ '{', '\}' \},
			{ '<', '>' \}
	\};

	public static String asString(ArrayList<String> values, boolean asPrefix, String sep) {
		StringBuilder sb = new StringBuilder();
		String pf = asPrefix ? sep : "";
		String sf = asPrefix ? "" : sep;
		for (String value : values) {
			sb.append(pf + value + sf);
		\}
		if (!asPrefix) { // removes trailing sep by default
			int beg = sb.length() - 1 - sep.length();
			sb.delete(beg, sb.length());
		\}
		return sb.toString();
	\}

	public static boolean numeric(String value) {
		if (value.length() == 0) return false; // empty string is a string
		try {
			Double.parseDouble(value);
		\} catch (NumberFormatException e) {
			return false;
		\}
		return true;
	\}

	/**
	 * Convert a list of strings to a standard csv representation
	 */
	public static String toCsv(List<String> strs) {
		StringBuilder sb = new StringBuilder();
		for (String s : strs) {
			sb.append(s + ", ");
		\}
		if (sb.length() > 1) sb.setLength(sb.length() - 2);
		return sb.toString();
	\}

	public static String csvValueList(List<Value> valueList) {
		return csvValueList(valueList, ", ");
	\}

	public static String csvValueList(List<Value> valueList, String sep) {
		if (valueList == null) return "";
		StringBuilder sb = new StringBuilder();
		for (Value v : valueList) {
			sb.append(v.basis + sep);
		\}
		return sb.toString().substring(0, sb.length() - sep.length());
	\}

	public static String csvList(List<String> stringList) {
		if (stringList == null) return "";
		StringBuilder sb = new StringBuilder();
		for (String str : stringList) {
			sb.append(str + ", ");
		\}
		int len = sb.length();
		sb.delete(len - 2, len);
		return sb.toString();
	\}

	public static List<String> csvToList(String csv) {
		String[] parts = csv.split(",");
		return Arrays.asList(parts);
	\}

	/**
	 * Remove leading reference identifier. No error if the identifier is not present.
	 */
	public static String varName(String varRef) {
		for (int idx = 0; idx < R.length; idx++) {
			if (varRef.charAt(0) == R[idx]) {
				return varRef.substring(1);
			\}
		\}
		return varRef;
	\}

	/**
	 * Remove one level of quotes surrounding the literal. No error if quotes are not present or are
	 * mixed.
	 */
	public static String deQuote(String literal) {
		int endIdx = literal.length() - 1;
		if (endIdx < 2) return literal;
		char beg = literal.charAt(0);
		char end = literal.charAt(endIdx);
		for (int idx = 0; idx < Q.length; idx++) {
			if (beg == Q[idx][0] && end == Q[idx][1]) {
				return literal.substring(1, endIdx);
			\}
		\}
		return literal;
	\}

	/**
	 * Concats the arguments to produce a valid string URL appropriate for classpath discovery.
	 * Separators are added as needed. All separators are converted to standard separators, ie,
	 * *nix-style.
	 */
	public static String concatAsClassPath(String... args) {
		return concat(args).replaceAll(WINDOWS_SEPARATOR, STD_SEPARATOR);
	\}

	/**
	 * Concats the arguments to produce a filesystem path fragment. Separators are added as needed.
	 * All separators are converted to standard separators, ie, *nix-style.
	 */
	public static String concat(String... args) {
		String result = "";
		for (String arg : args) {
			result = FilenameUtils.concat(result, arg);
		\}
		return result;
	\}

	/**
	 * Converts a standard java package-styled string to a corresponding filesystem path fragment.
	 * */
	public static String convertPkgToPath(String arg) {
		return arg.replace(pkgSep, STD_SEPARATOR);
	\}

	/**
	 * Removes any existing extension appended to the name, and then appends the given extension.
	 * Checks to ensure that a dot separator is present between the name and extension.
	 */
	public static String setExtension(String name, String ext) {
		int dot = name.lastIndexOf('.');
		if (dot != -1) {
			name = name.substring(0, dot);
		\}
		if (!ext.startsWith(".")) {
			ext = "." + ext;
		\}
		return name + ext;
	\}

	public static String initialLC(String str) {
		if (str == null) return "";
		if (str.length() < 2) return str.toLowerCase();
		return str.substring(0, 1).toLowerCase() + str.substring(1);
	\}

	public static String initialUC(String str) {
		if (str == null) return "";
		if (str.length() < 2) return str.toUpperCase();
		return str.substring(0, 1).toUpperCase() + str.substring(1);
	\}

	public static String trimLeft(String str) {
		return str.replaceAll("^\\\\s+", "");
	\}

	public static String trimRight(String str) {
		return str.replaceAll("\\\\s+$", "");
	\}

	public static String camelCase(String in) {
		StringBuilder sb = new StringBuilder(in);
		for (int idx = sb.length() - 1; idx >= 0; idx--) {
			char c = sb.charAt(idx);
			if (c == '_') {
				sb.deleteCharAt(idx);
				sb.setCharAt(idx, Character.toUpperCase(sb.charAt(idx)));
			\} else if (Character.isUpperCase(c)) {
				sb.setCharAt(idx, Character.toLowerCase(c));
			\}
		\}
		sb.setCharAt(0, Character.toLowerCase(sb.charAt(0)));
		return sb.toString();
	\}

	public static String tokenCase(String in) {
		if (isAllUpperCase(in)) {
			return Character.toString(in.charAt(0)) + in.substring(1).toLowerCase();
		\}
		return in;
	\}

	public static boolean isAllUpperCase(String in) {
		for (int idx = 0; idx < in.length(); idx++) {
			if (Character.isLowerCase(in.charAt(idx))) {
				return false;
			\}
		\}
		return true;
	\}

	public static String titleCase(String word) {
		if (word == null || word.length() == 0) return "";
		if (word.length() == 1) return word.toUpperCase();
		return word.substring(0, 1).toUpperCase() +
				word.substring(1).toLowerCase();
	\}

	/**
	 * Returns the lines of the block prefixed with the indent string. Ensures a leading EOL
	 * sequence and no trailing whitespace.
	 *
	 * @param ci
	 * @param block
	 * @return
	 */
	public static String indentBlock(String ci, String block) {
		if (block == null) return "<Error: indent include block is null>";
		StringReader sr = new StringReader(block);
		BufferedReader buf = new BufferedReader(sr);
		StringBuilder sb = new StringBuilder();
		String s;
		try {
			while ((s = buf.readLine()) != null) {
				sb.append(ci + s + Strings.eol);
			\}
			char c = sb.charAt(0);
			if (c != '\\n' && c != '\\r') {
				sb.insert(0, eol);
			\}
			return trimRight(sb.toString());
		\} catch (IOException e) {
			sb.append("<Error indenting block: " + e.getMessage() + ">");
		\}
		return sb.toString();
	\}
\}

>>
