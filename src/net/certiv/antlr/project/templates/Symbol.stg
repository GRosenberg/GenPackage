delimiters "%", "%"
import "D:\DevFiles\Java\WorkSpaces\Main\GenProject\src\net\certiv\antlr\project\libs\Header.stg"

ScopeClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ScopeClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ScopeClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ScopeClass(packageName) ::= <<
%hdrBeg()%
%ScopeClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%ScopeClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%ScopeClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.symbol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;

import %packageName%.util.Strings;

public class Scope {

	public final int genId;

	public ScopeType type;
	public Scope enclosingScope;
	protected Map<String, Symbol> symbolMap = new LinkedHashMap<String, Symbol>();

	public Scope(ScopeType type, final int genId, Scope enclosingScope) {
		this.type = type;
		this.genId = genId;
		this.enclosingScope = enclosingScope;
	\}

	/** Define a new variable in the current scope */
	public void define(String name, ArrayList<String> parameters) {
		String params = Strings.asString(parameters, true, ".");
		Symbol symbol = new Symbol(null, name + params, null);
		define(symbol);
	\}

	/** Define a symbol in the current scope */
	public void define(Symbol symbol) {
		symbol.setScope(this);
		symbolMap.put(symbol.name, symbol);
	\}

	/**
	 * Look up the symbol name in this scope and, if not found, progressively search the enclosing
	 * scopes. Return null if not found in any applicable scope.
	 */
	public Symbol resolve(String name) {
		Symbol symbol = symbolMap.get(name);
		if (symbol != null) return symbol;
		if (enclosingScope != null) return enclosingScope.resolve(name);
		return null; // not found
	\}

	public Symbol resolve(String name, ArrayList<String> parameters) {
		String params = Strings.asString(parameters, true, ".");
		return resolve(name + params);
	\}

	/** Where to look next for symbols */
	public Scope enclosingScope() {
		return enclosingScope;
	\}

	public String toString() {
		return symbolMap.keySet().toString();
	\}
\}

>>

SymbolClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

SymbolClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

SymbolClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

SymbolClass(packageName) ::= <<
%hdrBeg()%
%SymbolClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%SymbolClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%SymbolClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.symbol;

import %packageName%.converter.BaseDescriptor;
import %packageName%.types.ValueType;

public class Symbol {

	protected Scope scope; // the owning scope
	protected BaseDescriptor descriptor;
	protected String name;
	protected ValueType type;

	public Symbol(BaseDescriptor descriptor, String name, ValueType type) {
		this.descriptor = descriptor;
		this.name = name;
		this.type = type;
	\}

	public BaseDescriptor getDescriptor() {
		return descriptor;
	\}

	public String getName() {
		return name;
	\}

	public ValueType getType() {
		return type;
	\}

	public void setScope(Scope scope) {
		this.scope = scope;
	\}

	public Scope getScope() {
		return scope;
	\}

	public int genId() {
		return scope.genId;
	\}

	public String toString() {
		if (type != null) return '<' + getName() + ":" + type + '>';
		return getName();
	\}

	public Symbol clone() {
		return new Symbol(this.descriptor, this.name, this.type);
	\}
\}

>>

SymbolTableClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

SymbolTableClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

SymbolTableClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

SymbolTableClass(packageName) ::= <<
%hdrBeg()%
%SymbolTableClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%SymbolTableClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%SymbolTableClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.symbol;

import java.util.ArrayList;
import java.util.Stack;

import %packageName%.util.Log;

public class SymbolTable {

	protected Stack<Scope> scopeStack;
	protected ArrayList<Scope> allScopes;
	protected int genId = 0;

	public SymbolTable() {
		init();
	\}

	protected void init() {
		scopeStack = new Stack<>();
		allScopes = new ArrayList<>();
		genId = 0;

		Scope globals = new Scope(ScopeType.GLOBAL, nextGenId(), null);
		scopeStack.push(globals);
		allScopes.add(globals);
	\}

	public Scope pushScope() {
		Scope enclosingScope = scopeStack.peek();
		Scope scope = new Scope(ScopeType.LOCAL, nextGenId(), enclosingScope);
		scopeStack.push(scope);
		allScopes.add(scope);
		return scope;
	\}

	public void popScope() {
		scopeStack.pop();
	\}

	public Scope currentScope() {
		if (scopeStack.size() > 0) {
			return scopeStack.peek();
		\}
		Log.error(this, "Unbalanced scope stack.");
		return allScopes.get(0);
	\}

	public Scope getScope(int genId) {
		for (Scope scope : scopeStack) {
			if (scope.genId == genId) return scope;
		\}
		return null;
	\}

	public int getCurrentGen() {
		return genId;
	\}

	private int nextGenId() {
		genId++;
		return genId;
	\}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Scope scope : scopeStack.subList(0, scopeStack.size() - 1)) {
			sb.append(scope.toString());
		\}
		return sb.toString();
	\}

	@Override
	public SymbolTable clone() {
		SymbolTable nst = new SymbolTable();
		for (Scope scope : scopeStack) {
			if (scope.type == ScopeType.GLOBAL) continue;
			for (String name : scope.symbolMap.keySet()) {
				Symbol sym = scope.resolve(name).clone();
				nst.currentScope().define(sym);
			\}
			nst.pushScope();
		\}
		return nst;
	\}
\}

>>

ScopeTypeClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ScopeTypeClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ScopeTypeClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ScopeTypeClass(packageName) ::= <<
%hdrBeg()%
%ScopeTypeClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%ScopeTypeClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%ScopeTypeClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.symbol;

public enum ScopeType {
	GLOBAL,
	LOCAL;
\}


>>
