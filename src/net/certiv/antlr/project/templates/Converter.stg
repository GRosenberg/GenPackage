delimiters "%", "%"
import "D:\DevFiles\Java\WorkSpaces\Main\GenProject\src\net\certiv\antlr\project\libs\Header.stg"

IDescriptorClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

IDescriptorClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

IDescriptorClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

IDescriptorClass(packageName) ::= <<
%hdrBeg()%
%IDescriptorClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%IDescriptorClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%IDescriptorClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.converter;

public interface IDescriptor {

	public void initialize();

	public Value processOnEntry();

	public Value processOnExit();

	public Value process(String property);

	public Value process();

	public String toString();

\}


>>

ConverterClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ConverterClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ConverterClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ConverterClass(packageName, grammarName, startRule) ::= <<
%hdrBeg()%
%ConverterClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%ConverterClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%ConverterClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.converter;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import %packageName%.generator.IOProcessor;
import %packageName%.parser.%grammarName%ErrorListener;
import %packageName%.parser.%grammarName%TokenFactory;
import %packageName%.parser.gen.%grammarName%Lexer;
import %packageName%.parser.gen.%grammarName%Parser;
import %packageName%.util.Log;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

public class Converter {

	private IOProcessor processor;

	public Converter(IOProcessor processor) {
		super();
		this.processor = processor;
	\}

	public String convert(String srcData) {
		return convert(srcData, new PhaseState());
	\}

	public String convert(String srcData, PhaseState state) {
		String lastError = "<none>";
		try {
			lastError = "Failure in acquiring input stream.";
			ByteArrayInputStream is = new ByteArrayInputStream(srcData.getBytes());
			ANTLRInputStream input = new ANTLRInputStream(is);

			lastError = "Failure in generating lexer token stream.";
			%grammarName%Lexer lexer = new %grammarName%Lexer(input);
			// lexer.setLexerHelper(new LexerHelper());
			%grammarName%TokenFactory factory = new %grammarName%TokenFactory(input);
			lexer.setTokenFactory(factory);
			CommonTokenStream tokens = new CommonTokenStream(lexer);

			lastError = "Failure in parser production.";
			%grammarName%Parser parser = new %grammarName%Parser(tokens);
			parser.setTokenFactory(factory);
			parser.removeErrorListeners(); // remove ConsoleErrorListener
			parser.addErrorListener(new %grammarName%ErrorListener());
			// parser.setErrorHandler(new %grammarName%ParserErrorStrategy());
			ParseTree tree = parser.%startRule%();

			ParseTreeWalker walker = new ParseTreeWalker();

			lastError = "Failure in parse phase 1.";
			state.tokens = tokens;
			%grammarName%Phase01 phase01 = new %grammarName%Phase01(state, processor);
			phase01.collectComments(true);
			walker.walk(phase01, tree);

			lastError = "Failure in parse phase 2.";
			%grammarName%Phase02 phase02 = new %grammarName%Phase02(phase01, processor);
			walker.walk(phase02, tree);

			if (!%grammarName%Phase02.statusResolved) {
				Log.warn(this, "Failure to resolve source description");
				return "";
			\}

			lastError = "Failure in parse phase 3.";
			%grammarName%Phase03 phase03 = new %grammarName%Phase03(phase02, processor);
			walker.walk(phase03, tree);
			Log.info(this, "Convertion complete.");

			Log.info(this, "Convertion complete.");
			return state.doc.toString();

		\} catch (IOException e) {
			Log.error(this, lastError, e);
			return "";
		\}
	\}
\}


>>

IOProcessorCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

IOProcessorContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

IOProcessorVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

IOProcessor(packageName, grammarName) ::= <<
%hdrBeg()%
%IOProcessorCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%IOProcessorContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%IOProcessorVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.generator;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import %packageName%.util.Log;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

public class IOProcessor {

	private String[] opts; // pathnames
	private String source; // processed pathnames
	private String target;

	private boolean FileIn; // flags
	private boolean FileOut;
	private boolean StdIO;
	private boolean TextIn;

	private String srcData; // loaded mtl source data

	public IOProcessor(String[] args) {
		if (args.length == 0) {
			printHelp();
		\}
		opts = new String[3];
		opts[0] = opts[1] = opts[2] = "";
		for (int idx = 0; idx < args.length; idx++) {

			switch (args[idx].trim().toLowerCase()) {
				case "-h":
					printHelp();
					break;
				default:
					printHelp();
					break;
			\}
		\}
	\}

	public boolean init() {
		if (!(FileIn || StdIO)) {
			Log.error(this, "Need to specify a source.");
			return false;
		\}

		if (FileIn) {
			source = opts[0];
			File srcFile = new File(source);
			if (!srcFile.exists()) {
				Log.error(this, "Source file does not exist (" + source + ")");
				return false;
			\}
		\}

		if (FileOut) {
			target = opts[1];
		\} else if (FileIn && !StdIO) {
			FileOut = true;
			int idx = source.lastIndexOf('.');
			target = source.substring(0, idx + 1) + "html";
		\}
		if (FileOut) {
			File dstFile = new File(target);
			if (dstFile.exists()) {
				dstFile.delete();
				dstFile = new File(target);
			\}
		\}

		return true;
	\}

	public String loadData() {
		if (FileIn) {
			String msg = "Error reading source data from file '" + source + "'";
			try {
				srcData = FileUtils.readFileToString(new File(source));
			\} catch (IOException e) {
				Log.error(this, msg);
			\}
		\} else if (StdIO && !TextIn) {
			String msg = "Error reading source data from standard in";
			InputStream in = System.in;
			try {
				srcData = IOUtils.toString(System.in);
			\} catch (IOException e) {
				Log.error(this, msg);
			\} finally {
				IOUtils.closeQuietly(in);
			\}
		\} else if (TextIn) {
			StdIO = true;
		\}
		return srcData;
	\}

	public void storeData(String data) {
		if (FileOut) {
			try {
				FileUtils.writeStringToFile(new File(target), data);
			\} catch (IOException e) {
				Log.error(this, "Error writing result data to file '" + target + "'", e);
			\}
		\} else if (StdIO) {
			OutputStream out = System.out;
			try {
				IOUtils.write(data, out);
			\} catch (IOException e) {
				Log.error(this, "Error writing result data to standard out", e);
			\} finally {
				IOUtils.closeQuietly(out);
			\}
		\}
	\}

	@SuppressWarnings("unused")
	private String cwd() {
		String cwd = "";
		try {
			cwd = new File(".").getCanonicalPath();
		\} catch (IOException e) {\}
		return cwd;
	\}

	@SuppressWarnings("unused")
	private String readFile(String filename) {
		File file = new File(filename);
		String data = null;
		try {
			data = FileUtils.readFileToString(file);
		\} catch (IOException e) {
			Log.error(this, "Error reading file", e);
		\}
		return data;

	\}

	private void printHelp() {
		System.out.println("Usage:");
		System.out.println("java -jar [cli_options]" + System.lineSeparator());
		// etc.
		System.exit(0);
	\}
\}

>>
