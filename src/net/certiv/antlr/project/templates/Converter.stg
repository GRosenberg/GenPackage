delimiters "%", "%"
import "D:\DevFiles\Java\WorkSpaces\Main\GenProject\src\net\certiv\antlr\project\libs\Header.stg"

JsonMainClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

JsonMainClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

JsonMainClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

JsonMainClass(packageName, grammarName) ::= <<
%hdrBeg()%
%JsonMainClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%JsonMainClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%JsonMainClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%;

import java.io.File;

import %packageName%.converter.Converter;
import %packageName%.converter.PhaseState;
import %packageName%.util.Log;

public class %grammarName%Main {

	public static void main(String[] args) {
		new %grammarName%Main(args);
	\}

	public %grammarName%Main(String[] args) {

		if (args == null || args.length == 0) {
			String input = "D:/DevFiles/Java/WorkSpaces/Main/%packageName%/%grammarName%/src/samples";
			args = new String[] { "-i", input, "-t", "java" \};
		\}

		Log.info(this, "Java2Go running...");
		IOProcessor processor = new IOProcessor(args);
		if (processor.init()) {
			File root = new File(processor.getSourceDir());
			Converter converter = new Converter(processor);

			for (File file : processor.collectSourceFiles(root)) {
				String srcName = file.getPath();
				srcName = srcName.replaceAll("\\\\\\\\", "/");
				String srcData = processor.loadData(file);

				if (srcData.length() == 0) {
					Log.error(this, "Skipping " + srcName);
					continue;
				\}

				String outName = processor.convertName(srcName);
				String result = converter.convert(srcName, srcData);
				processor.storeData(outName, result);
			\}

			Log.info(this, "Done.");
		\} else {
			Log.error(this, "Failed.");
		\}
	\}

	/**
	 * %grammarName%Main - re-entry point for embedded use<br>
	 * <br>
	 * Usage:<br>
	 * %grammarName%Main jm = new %grammarName%Main();<br>
	 * String resultData = jm.start(String srcName, String srcData, SymbolTable symTable);
	 */
	public %grammarName%Main() {
		super();
	\}

	/**
	 * Start embedded run
	 * 
	 * @param srcName file name associated with srcData
	 * @param srcData data to evaluate
	 * @param state carry data between phases - inlcudes symbol table
	 * @param iop the I/O processor
	 * @return
	 */
	public String start(String srcName, String srcData, PhaseState state, IOProcessor iop) {
		Converter nominal = new Converter(iop);
		PhaseState srcState = state.clone();
		return nominal.convert(srcName, srcData, srcState);
	\}
\}


>>

IDescriptorClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

IDescriptorClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

IDescriptorClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

IDescriptorClass(packageName) ::= <<
%hdrBeg()%
%IDescriptorClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%IDescriptorClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%IDescriptorClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.converter;

public interface IDescriptor {

	public void initialize();

	public String content();

	public Value processOnEntry();

	public Value processOnExit();

	public Value process(String property);

	public Value process();

	public void setCollectComments(boolean collect);

	public boolean getCollectComments();

	public void setLeftComment(String comment);

	public void setRightComment(String comment);

	public String getLeftComment();

	public String getRightComment();

	public String toString();
\}


>>

ConverterClassCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

ConverterClassContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

ConverterClassVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

ConverterClass(packageName, grammarName, startRule) ::= <<
%hdrBeg()%
%ConverterClassCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%ConverterClassContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%ConverterClassVersion()%
%hdrBlankLn()%
%hdrEnd()%
package %packageName%.converter;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import %packageName%.IOProcessor;
import %packageName%.parser.%grammarName%ErrorListener;
import %packageName%.parser.%grammarName%TokenFactory;
import %packageName%.parser.gen.%grammarName%Lexer;
import %packageName%.parser.gen.%grammarName%Parser;
import %packageName%.parser.gen.%grammarName%Parser.%grammarName%Context;
import %packageName%.util.Log;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

public class Converter {

	private IOProcessor processor;
	private String lastError = "<none>";

	public Converter(IOProcessor processor) {
		super();
		this.processor = processor;
	\}

	public String convert(String srcName, String srcData) {
		return convert(srcName, srcData, new PhaseState());
	\}

	public String convert(String srcName, String srcData, PhaseState state) {
		try {
			%grammarName%Context tree = parse(srcName, srcData, state);
			ParseTreeWalker walker = new ParseTreeWalker();
			%grammarName%Phase01 phase01 = processPhase01(tree, walker, state);
			%grammarName%Phase02 phase02 = processPhase02(tree, walker, phase01);
			%grammarName%Phase03 phase03 = processPhase03(tree, walker, phase02);
			Log.info(this, "Convertion complete.");
			return phase03.state.toString();
		\} catch (IOException e) {
			Log.error(this, lastError, e);
			return "";
		\}
	\}

	private %grammarName%Context parse(String srcName, String srcData, PhaseState state) throws IOException {
		lastError = "Failure in acquiring input stream.";
		ByteArrayInputStream is = new ByteArrayInputStream(srcData.getBytes());
		ANTLRInputStream input = new ANTLRInputStream(is);
		input.name = srcName;

		lastError = "Failure in generating lexer token stream.";
		%grammarName%Lexer lexer = new %grammarName%Lexer(input);
		%grammarName%TokenFactory factory = new %grammarName%TokenFactory(input);
		lexer.setTokenFactory(factory);
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		state.tokens = tokens;

		lastError = "Failure in parser production.";
		%grammarName%Parser parser = new %grammarName%Parser(tokens);
		parser.setTokenFactory(factory);
		parser.removeErrorListeners(); // remove ConsoleErrorListener
		parser.addErrorListener(new %grammarName%ErrorListener());
		// parser.setErrorHandler(new %grammarName%ParserErrorStrategy());
		return parser.%startRule%();

	\}

	public %grammarName%Phase01 processPhase01(%grammarName%Context tree, ParseTreeWalker walker, PhaseState state) {
		lastError = "Failure in parse phase 1.";
		%grammarName%Phase01 phase01 = new %grammarName%Phase01(state, processor);
		phase01.collectComments(true);
		walker.walk(phase01, tree);
		return phase01;
	\}

	public %grammarName%Phase02 processPhase02(%grammarName%Context tree, ParseTreeWalker walker, %grammarName%Phase01 phase01) {
		lastError = "Failure in parse phase 2.";
		%grammarName%Phase02 phase02 = new %grammarName%Phase02(phase01, processor);
		walker.walk(phase02, tree);
		if (!%grammarName%Phase02.statusResolved) {
			Log.warn(this, "Failure to resolve source description in phase2");
		\}
		return phase02;
	\}

	public %grammarName%Phase03 processPhase03(%grammarName%Context tree, ParseTreeWalker walker, %grammarName%Phase02 phase02) {
		lastError = "Failure in parse phase 3.";
		%grammarName%Phase03 phase03 = new %grammarName%Phase03(phase02, processor);
		walker.walk(phase03, tree);
		return phase03;
	\}
\}


>>

IOProcessorCopyright() ::= <<
 * Copyright (c) 2008-2014 G Rosenberg.
 * 
>>

IOProcessorContributor() ::= <<
 *		G Rosenberg - initial API and implementation
 * 
>>

IOProcessorVersion() ::= <<
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * 
>>

IOProcessor(packageName, grammarName) ::= <<
%hdrBeg()%
%IOProcessorCopyright()%
%epl()%
%hdrBlankLn()%
%hdrContribPrefix()%
%IOProcessorContributor()%
%hdrBlankLn()%
%hdrVersionPrefix()%
%IOProcessorVersion()%
%hdrBlankLn()%
%hdrEnd()%
/*******************************************************************************
 * // Copyright ==========
 * Copyright (c) 2008-2014 G Rosenberg.
 * // Copyright ==========
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributor:
 * // Contributor ==========
 *		G Rosenberg - initial API and implementation
 * // Contributor ==========
 *
 * Versions:
 * // Version ==========
 * 		1.0 - 2014.03.26: First release level code
 * 		1.1 - 2014.08.26: Updates, add Tests support
 * // Version ==========
 *******************************************************************************/
// TestIOProcessor ==========
package %packageName%;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.io.FileUtils;

import %packageName%.util.Log;
import %packageName%.util.Log.LogLevel;

public class IOProcessor {

	private String source; // dir pathnames
	private String target;

	private ArrayList<String> types = new ArrayList<>();

	public IOProcessor(String[] args) {
		Log.setLevel(this, LogLevel.Debug);
		if (args.length == 0) {
			printHelp();
		\}

		for (int idx = 0; idx < args.length; idx++) {

			switch (args[idx].trim().toLowerCase()) {
				case "-i":
					idx++;
					source = args[idx];
					break;
				case "-o":
					idx++;
					target = args[idx];
					break;
				case "-l":
					idx++;
					Log.defLevel(args[idx].trim());
					break;
				case "-t":
					idx++;
					types.add(args[idx]);
					break;

				case "-h":
				default:
					printHelp();
					break;
			\}
		\}
	\}

	private void printHelp() {
		String levels = "'debug', 'info', 'warn', 'error', or 'silent' (default: 'warn'";
		System.out.println("Usage:");
		System.out.println("java -jar [cli_options]" + System.lineSeparator());
		System.out.println("-h                print cli help");
		System.out.println("-i <dir>          root directory for source files");
		System.out.println("-l <string>       set logging level to string: " + levels);
		System.out.println("-o <dir>          root directory for output files");
		System.out.println("-t <types>        types of input files to convert");
		System.exit(0);
	\}

	public boolean init() {
		if (source == null) {
			Log.error(this, "Need to specify a source directory path.");
			return false;
		\}
		if (target == null) {
			Log.error(this, "Need to specify a destination directory path.");
			return false;
		\}

		File root = new File(source);
		if (!root.exists()) {
			Log.error(this, "Source directory does not exist (" + source + ")");
			return false;
		\}

		// TODO: handle clear and force options
		// root = new File(target);
		// if (root.exists()) {
		// root.delete();
		// \}

		return true;
	\}

	public String getSourceDir() {
		return source;
	\}

	public String getTargetDir() {
		return target;
	\}

	// TODO: convert based on type
	public String convertName(String pName) {
		String name = pName.replaceFirst("Java/src", "%grammarName%/src");
		int dot = name.lastIndexOf("java");
		name = name.substring(0, dot) + "json";
		return name;
	\}

	public Collection<File> collectSourceFiles(File root) {
		String[] checkedTypes = getCheckedTypes();
		Collection<File> files = FileUtils.listFiles(root, checkedTypes, true);
		return files;
	\}

	private String[] getCheckedTypes() {
		int num = types.size();
		return types.toArray(new String[num]);
	\}

	public String loadData(File source) {
		String srcData = "";
		try {
			srcData = FileUtils.readFileToString(source);
		\} catch (IOException e) {
			Log.error(this, "Error reading source data from file '" + source + "'");
		\}
		return srcData;
	\}

	public void storeData(String destination, String data) {
		try {
			FileUtils.writeStringToFile(new File(destination), data);
		\} catch (IOException e) {
			Log.error(this, "Error writing result data to file '" + target + "'", e);
		\}
	\}

	@SuppressWarnings("unused")
	private String cwd() {
		String cwd = "";
		try {
			cwd = new File(".").getCanonicalPath();
		\} catch (IOException e) {\}
		return cwd;
	\}
\}
// TestIOProcessor ==========

>>
